# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ToDoListManagerGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog, QMessageBox, QListWidget
from PyQt5.QtGui import QIcon
import pickle
from ToDoList import ToDoList

toDoLists = []                                       # The list where to do list objects are stored
fileName = "null"                                    # The file where the to do lists are saved

class Ui_TaskView(QWidget):
    def setupUi(self, TaskView):
        #----------------------------------------------------------------------------
        TaskView.setObjectName("TaskView")
        TaskView.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(TaskView)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(10, 10, 160, 80))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.listTitle1 = QtWidgets.QLabel(self.gridLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.listTitle1.setFont(font)
        self.listTitle1.setObjectName("listTitle1")
        self.gridLayout.addWidget(self.listTitle1, 0, 0, 1, 1)
        self.listWidget = QtWidgets.QListWidget(self.gridLayoutWidget)
        self.listWidget.setObjectName("listWidget")
        self.gridLayout.addWidget(self.listWidget, 1, 0, 1, 1)
        TaskView.setCentralWidget(self.centralwidget)
        self.listWidget.setGeometry(QtCore.QRect(10, 10, 160, 80)) #--------------
        self.menubar = QtWidgets.QMenuBar(TaskView)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuList = QtWidgets.QMenu(self.menubar)
        self.menuList.setObjectName("menuList")
        self.menuTask = QtWidgets.QMenu(self.menubar)
        self.menuTask.setObjectName("menuTask")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        TaskView.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(TaskView)
        self.statusbar.setObjectName("statusbar")
        TaskView.setStatusBar(self.statusbar)
        self.actionNew = QtWidgets.QAction(TaskView)
        self.actionNew.setObjectName("actionNew")
        self.actionOpen = QtWidgets.QAction(TaskView)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(TaskView)
        self.actionSave.setObjectName("actionSave")
        self.actionSaveAs = QtWidgets.QAction(TaskView)
        self.actionSaveAs.setObjectName("actionSaveAs")
        self.actionCreateNewList = QtWidgets.QAction(TaskView)
        self.actionCreateNewList.setObjectName("actionCreateNewList")
        self.actionDeleteList = QtWidgets.QAction(TaskView)
        self.actionDeleteList.setObjectName("actionDeleteList")
        self.actionAddTask = QtWidgets.QAction(TaskView)
        self.actionAddTask.setObjectName("actionAddTask")
        self.actionTickOffTask = QtWidgets.QAction(TaskView)
        self.actionTickOffTask.setObjectName("actionTickOffTask")
        self.actionMarkImportant = QtWidgets.QAction(TaskView)
        self.actionMarkImportant.setObjectName("actionMarkImportant")
        self.actionAddDueDate = QtWidgets.QAction(TaskView)
        self.actionAddDueDate.setObjectName("actionAddDueDate")
        self.actionShowCompletedTasks = QtWidgets.QAction(TaskView)
        self.actionShowCompletedTasks.setCheckable(True)
        self.actionShowCompletedTasks.setObjectName("actionShowCompletedTasks")
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSaveAs)
        self.menuList.addAction(self.actionCreateNewList)
        self.menuList.addAction(self.actionDeleteList)
        self.menuTask.addAction(self.actionAddTask)
        self.menuTask.addAction(self.actionTickOffTask)
        self.menuTask.addAction(self.actionMarkImportant)
        self.menuTask.addAction(self.actionAddDueDate)
        self.menuView.addAction(self.actionShowCompletedTasks)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuList.menuAction())
        self.menubar.addAction(self.menuTask.menuAction())
        self.menubar.addAction(self.menuView.menuAction())

        self.retranslateUi(TaskView)
        QtCore.QMetaObject.connectSlotsByName(TaskView)

        #---------------------------------------

        self.actionNew.triggered.connect(lambda: self.clicked("New was Clicked")) # triggered = can click or use shortcut lambda = a function defined on one line (function calling a function)
        self.actionOpen.triggered.connect(lambda: self.loadLists()) 
        self.actionSave.triggered.connect(lambda: self.clicked("Save was Clicked"))     
        self.actionSaveAs.triggered.connect(lambda: self.saveFileDialog())

        self.actionCreateNewList.triggered.connect(lambda: self.clicked("Create a New List was Clicked"))     
        self.actionDeleteList.triggered.connect(lambda: self.clicked("Delete a list was Clicked"))

        self.actionAddTask.triggered.connect(lambda: self.clicked("Add a Task was Clicked"))     
        self.actionTickOffTask.triggered.connect(lambda: self.clicked("Tick off a Task was Clicked"))
        self.actionMarkImportant.triggered.connect(lambda: self.clicked("Mark a Task as Important was Clicked"))     
        self.actionAddDueDate.triggered.connect(lambda: self.clicked("Add/Change Due Date was Clicked"))



    def retranslateUi(self, TaskView):
        _translate = QtCore.QCoreApplication.translate
        TaskView.setWindowTitle(_translate("TaskView", "MainWindow"))
        self.listTitle1.setText(_translate("TaskView", "TextLabel"))
        self.menuFile.setTitle(_translate("TaskView", "File"))
        self.menuList.setTitle(_translate("TaskView", "List"))
        self.menuTask.setTitle(_translate("TaskView", "Task"))
        self.menuView.setTitle(_translate("TaskView", "View"))
        self.actionNew.setText(_translate("TaskView", "New"))
        self.actionOpen.setText(_translate("TaskView", "Open"))
        self.actionSave.setText(_translate("TaskView", "Save"))
        self.actionSave.setShortcut(_translate("TaskView", "Ctrl+S"))
        self.actionSaveAs.setText(_translate("TaskView", "Save As"))
        self.actionCreateNewList.setText(_translate("TaskView", "Create a New List"))
        self.actionDeleteList.setText(_translate("TaskView", "Delete a List"))
        self.actionAddTask.setText(_translate("TaskView", "Add a Task"))
        self.actionTickOffTask.setText(_translate("TaskView", "Tick off a Task"))
        self.actionMarkImportant.setText(_translate("TaskView", "Mark a Task as Important"))
        self.actionAddDueDate.setText(_translate("TaskView", "Add/Change a Due Date"))
        self.actionShowCompletedTasks.setText(_translate("TaskView", "Show Completed Tasks"))

    def openFileNameDialog(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(self,"Open a File", "","(*.dat);;All Files (*);;Python Files (*.py)", options=options)
        if fileName:
            return fileName
    
    def saveFileDialog(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getSaveFileName(self,"Save As","","(*.dat);;All Files (*);;Text Files (*.txt)", options=options)
        if fileName:
            return fileName

    def loadLists(self):                                                             # load the lists stored in the file
        fileName = self.openFileNameDialog()
        try:                                                                     # try to open the file (Read) 
            with open(fileName, "rb") as f: 
                toDoLists = pickle.load(f)                                       # and load the to do lists into the "toDoLists" list 
        except:                                                                  # If that fails
            toDoLists = []                                                       # continue with no to do lists
        #print(fileName)
        #toDoLists[0].printList(40)
        self.listTitle1.setText(toDoLists[0].name)
        self.listTitle1.adjustSize()
        

        for x in range(len(toDoLists[0].list)):
            item = QtWidgets.QListWidgetItem()
            self.listWidget.addItem(item)
            item = self.listWidget.item(x)
            item.setText("- " + toDoLists[0].list[x].name)

        self.listWidget.adjustSize()
        #self.gridLayoutWidget.adjustSize()

        '''
        for listNo in range(len(toDoLists)):
            self.listTitle1 = QtWidgets.QLabel(self.gridLayoutWidget)
            font = QtGui.QFont()
            font.setPointSize(22)
            font.setBold(True)
            font.setWeight(75)
            self.listTitle.setFont(font)
            self.listTitle.setObjectName("listTitle")
            self.gridLayout.addWidget(self.listTitle, 0, list, 1, 1)
            self.listWidget = QtWidgets.QListWidget(self.gridLayoutWidget)
            self.listWidget.setObjectName("listWidget")
            self.gridLayout.addWidget(self.listWidget, 1, list, 1, 1)

            for x in range(len(toDoLists[0].list)):
                item = QtWidgets.QListWidgetItem()
                self.listWidget.addItem(item)
                item = self.listWidget.item(x)
                item.setText(toDoLists[0].list[x].name)
        '''

        return toDoLists 


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    TaskView = QtWidgets.QMainWindow()
    ui = Ui_TaskView()
    ui.setupUi(TaskView)
    TaskView.show()
    sys.exit(app.exec_())
